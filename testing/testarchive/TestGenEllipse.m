%---------------------------------------------------------------------------
% Copyright 2018-2021, by the California Institute of Technology. ALL RIGHTS
% RESERVED. United States Government Sponsorship acknowledged. Any
% commercial use must be negotiated with the Office of Technology Transfer
% at the California Institute of Technology.
%---------------------------------------------------------------------------
%% Test falco_gen_annular_FPM.m
%
% We define some tests for falco_gen_annular_FPM.m to test responses 
% different input parameters. 
classdef TestGenEllipse < matlab.unittest.TestCase  
%% Properties
%
% A presaved file with FALCO parameters was saved and is lodaded to be used
% by methods. In this case we only use the mp.path.falco + lib/utils to
% addpath to utils functions to be tested.
%     properties
%         mp=Parameters();
%     end

%% Setup and Teardown Methods
%
%  Add and remove path to library functions to be tested.

    methods (TestClassSetup)
        function addPath(testCase)
            pathToFalco = fileparts(fileparts(fileparts(mfilename('fullpath')))); % falco-matlab directory;
            addpath(genpath([pathToFalco filesep 'lib']));
            addpath(genpath([pathToFalco filesep 'lib_external']));
        end
    end
    methods (TestClassTeardown)
        function removePath(testCase)
            pathToFalco = fileparts(fileparts(fileparts(mfilename('fullpath')))); % falco-matlab directory;
            rmpath(genpath([pathToFalco filesep 'lib']));
            addpath(genpath([pathToFalco filesep 'lib_external']));
        end
    end

%% Tests
%
%  Creates four tests:
%
% # *testOccSpotArea* verify that the area of the spot (circle) generated by
%                     falco_gen_annular_FPM.m is within 0.1% of the
%                     expected area.
% # *testOccSpotTranslation* verify that the the actual spot translation of
%                            the spot is equal to the expected translation.
% # *testAnnularOpeningArea* Verify that the are of the annular opening
%                            generated by falco_gen_annular_FPM.m is within
%                            0.1% of the expected area.
% # *testAnnularOpeningTranslation* Verify that the actual annular opening
%                                   translation is equal to the expected
%                                   translation.
    methods (Test)    
        function testEllipseAreaOddSampling(testCase)
            % inputs.pixresFPM = 6; %--pixels per lambda_c/D
            % inputs.rhoInner = 3; % radius of inner FPM amplitude spot (in lambda_c/D)
            % inputs.rhoOuter = inf; % radius of outer opaque FPM ring (in lambda_c/D)
            inputs.Nbeam = 10;
            inputs.Narray = 16;
            inputs.centering = 'pixel';
            inputs.radiusX = 0.5;
            inputs.radiusY = 0.5;
            inputs.clockingDegrees = 0;
            % inputs.xShear = 5.5;
            % inputs.yShear = -10;
            inputs.upsampleFactor = 13;
            ellipse = falco_gen_ellipse(inputs);
            
            areaExpected = pi*(inputs.Nbeam*inputs.radiusX)*(inputs.Nbeam*inputs.radiusY);
            area = sum(ellipse(:));
            
            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance
            testCase.verifyThat(area, IsEqualTo(areaExpected,'Within', RelativeTolerance(0.001)))
        end
        function testEllipseAreaEvenSampling(testCase)
            % inputs.pixresFPM = 6; %--pixels per lambda_c/D
            % inputs.rhoInner = 3; % radius of inner FPM amplitude spot (in lambda_c/D)
            % inputs.rhoOuter = inf; % radius of outer opaque FPM ring (in lambda_c/D)
            inputs.Nbeam = 10;
            inputs.Narray = 16;
            inputs.centering = 'pixel';
            inputs.radiusX = 0.5;
            inputs.radiusY = 0.5;
            inputs.clockingDegrees = 0;
            % inputs.xShear = 5.5;
            % inputs.yShear = -10;
            inputs.upsampleFactor = 10;
            ellipse = falco_gen_ellipse(inputs);
            
            areaExpected = pi*(inputs.Nbeam*inputs.radiusX)*(inputs.Nbeam*inputs.radiusY);
            area = sum(ellipse(:));
            
            import matlab.unittest.constraints.IsEqualTo
            import matlab.unittest.constraints.RelativeTolerance
            testCase.verifyThat(area, IsEqualTo(areaExpected,'Within', RelativeTolerance(0.001)))
        end
        % function testEllipseAreaImprovingOddUpsampling(testCase)
        %     % inputs.pixresFPM = 6; %--pixels per lambda_c/D
        %     % inputs.rhoInner = 3; % radius of inner FPM amplitude spot (in lambda_c/D)
        %     % inputs.rhoOuter = inf; % radius of outer opaque FPM ring (in lambda_c/D)
        %     inputs.Nbeam = 10;
        %     inputs.Narray = 16;
        %     inputs.centering = 'pixel';
        %     inputs.radiusX = 0.5;
        %     inputs.radiusY = 0.5;
        %     inputs.clockingDegrees = 0;
        %     % inputs.xShear = 5.5;
        %     % inputs.yShear = -10;
        % 
        %     areaExpected = pi*(inputs.Nbeam*inputs.radiusX)*(inputs.Nbeam*inputs.radiusY);
        % 
        %     n_max = 101;
        %     usf_vec_odd = 11:2:n_max;
        %     error_vec_odd = zeros(length(usf_vec_odd), 1);
        % 
        %     usf_vec_even = 10:2:n_max;
        %     error_vec_even = zeros(length(usf_vec_even), 1);
        % 
        %     for ii = 1:length(usf_vec_odd)
        %         inputs.upsampleFactor = usf_vec_odd(ii);
        %         ellipse = falco_gen_ellipse(inputs);
        %         area = sum(ellipse(:));
        %         error_vec_odd(ii) = area - areaExpected;
        %     end
        %     for ii = 1:length(usf_vec_even)
        %         inputs.upsampleFactor = usf_vec_even(ii);
        %         ellipse = falco_gen_ellipse(inputs);
        %         area = sum(ellipse(:));
        %         error_vec_even(ii) = area - areaExpected;
        %     end
        %     figure(101); plot(...
        %         [0, n_max], [0, 0], '-k',...
        %         usf_vec_odd, error_vec_odd, '-r',...
        %         usf_vec_even, error_vec_even, '-b', ...
        %         'Linewidth', 2);
        %     legend('', 'Odd', 'Even')
        %     set(gca, 'FontSize', 20)
        %     set(gcf, 'Color', 'w')
        % 
        % end
        
    end    
end
